name: Deploy Cloud Resume Challenge
run-name: ${{ github.actor }} is deploying Cloud Resume Challenge.
on:
  workflow_call:
    inputs:
      backend-key:
        required: true
        type: string
      backend-bucket:
        required: true
        type: string
      target-environment:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
jobs:
  deploy-app:
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_project: ${{ vars.TF_VAR_PROJECT }}
      TF_VAR_domain: ${{ vars.TF_VAR_APP_DOMAIN }}
      TF_VAR_environment: ${{ inputs.target-environment }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4
          terraform_wrapper: false
      - name: Initialize app terraform
        run: |
          terraform init \
            -backend-config="key=${{ inputs.backend-key }}-app" \
            -backend-config="bucket=${{ inputs.backend-bucket }}"
        working-directory: ./infrastructure/app
      - name: Apply app terraform
        run: terraform apply -auto-approve
        working-directory: ./infrastructure/app
      - id: app-output
        name: Set app terraform outputs
        run: |
          echo "project=$(terraform output -raw project)" >> "$GITHUB_OUTPUT" && 
          echo "app-url=$(terraform output -raw app_url)" >> "$GITHUB_OUTPUT"
        working-directory: ./infrastructure/app
    outputs:
      project: ${{ steps.app-output.outputs.project }}
      app-url: ${{ steps.app-output.outputs.app-url }}

  build-web:
    needs: deploy-app
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      API_URL: ${{needs.deploy-app.outputs.app-url}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.13.0
      - name: Install web dependencies
        run: npm install
        working-directory: ./front-end
      - name: Build web
        run: npm run build
        working-directory: ./front-end
      - name: Archive web artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: front-end/build

  deploy-web:
    needs: [deploy-app, build-web]
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_project: ${{needs.deploy-app.outputs.project}}
      TF_VAR_domain: ${{ vars.TF_VAR_WEB_DOMAIN }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4
          terraform_wrapper: false
      - name: Download web artifact
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: front-end/build
      - name: Initialize web terraform
        run: |
          terraform init \
            -backend-config="key=${{ inputs.backend-key }}-web" \
            -backend-config="bucket=${{ inputs.backend-bucket }}"
        working-directory: ./infrastructure/web
      - name: Apply web terraform
        run: terraform apply -auto-approve
        working-directory: ./infrastructure/web
      - id: web-output
        name: Set web terraform outputs
        run: |
          echo "web-url=$(terraform output -raw web_url)" >> "$GITHUB_OUTPUT"
        working-directory: ./infrastructure/web
    outputs:
      web-url: ${{ steps.web-output.outputs.web-url }}

